#ifdef GL_ES
precision highp float;
#endif

// General parameters
uniform sampler2D from;
uniform sampler2D to;
uniform float progress;
uniform vec2 resolution;
 
const vec2 center = vec2(0.5, 0.5);

float quadraticInOut(float t) {
  float p = 2.0 * t * t;
  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;
}

// borrowed from wind.
// https://glsl.io/transition/7de3f4b9482d2b0bf7bb
float rand(vec2 co) {
  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}


void main() {
  vec2 p = gl_FragCoord.xy / resolution.xy;
  
  if (progress == 0.0) {
    gl_FragColor = texture2D(from, p);
  } else if (progress == 1.0) {
    gl_FragColor = texture2D(to, p);
  } else {
    float x = progress;
    float dist = distance(center, p);
    float r = x - min(rand(vec2(p.y, 0.0)), rand(vec2(0.0, p.x)));
    float m = dist <= r ? 1.0 : 0.0;
    gl_FragColor = mix(texture2D(from, p), texture2D(to, p), m);    
  }
  
}














#ifdef GL_ES
precision highp float;
#endif
 
// General parameters
uniform sampler2D from;
uniform sampler2D to;
uniform float progress;
uniform vec2 resolution;
 
// Custom parameters
uniform float size;
 
float rand (vec2 co) {
  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}
 
void main() {
  vec2 p = gl_FragCoord.xy / resolution.xy;
  float r = rand(vec2(0, p.y));
  float m = smoothstep(0.0, -size, p.x*(1.0-size) + size*r - (progress * (1.0 + size)));
  gl_FragColor = mix(texture2D(from, p), texture2D(to, p), m);
}















#ifdef GL_ES
precision highp float;
#endif
#define PI 3.141592653589
uniform sampler2D from, to;
uniform float progress;
uniform vec2 resolution;

void main() {
  vec2 p = gl_FragCoord.xy / resolution.xy;
  vec2 rp = p*2.-1.;
  float a = atan(rp.y, rp.x);
  float pa = progress*PI*2.5-PI*1.25;
  vec4 fromc = texture2D(from, p);
  vec4 toc = texture2D(to, p);
  if(a>pa) {
    gl_FragColor = mix(toc, fromc, smoothstep(0., 1., (a-pa)));
  } else {
    gl_FragColor = toc;
  }
}