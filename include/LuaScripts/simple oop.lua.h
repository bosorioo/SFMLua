/************
* Generated with lua2header.lua
* Original source code:
*
* 1 - local sub = string.sub
* 2 - local unpack = table.unpack
* 3 - local rawget = rawget
* 4 - local function class__call(class, ...)
* 5 - 	return class.new(...)
* 6 - end
* 7 - local function extends(derived, baseName)
* 8 - 	derived._internal_baseClass = _G[baseName]
* 9 - end
* 10 - local propagationMeta = {}
* 11 - propagationMeta.__index = function(propagationTable, index)
* 12 - 	local thisClass = propagationTable[1]
* 13 - 	local instance = propagationTable[2]
* 14 - 	if index == 'super' then
* 15 - 		local ret = rawget(instance, index) or thisClass[index]
* 16 - 		if ret then return ret end
* 17 - 		propagationTable[1] = thisClass._internal_baseClass
* 18 - 		return propagationTable
* 19 - 	end
* 20 - 	return rawget(instance, index) or thisClass[index] or instance[index]
* 21 - end
* 22 - propagationMeta.__call = function(propagationTable, ...)
* 23 - 	return propagationTable[1].constructor(propagationTable[2], ...)
* 24 - end
* 25 - propagationMeta.__newindex = function(propagationTable, index, value)
* 26 - 	propagationTable[2][index] = value
* 27 - end

* 28 - function Class (className)
* 29 - 	local class = {_internal_baseClass = nil, extends = extends}
* 30 - 	class._internal_instance_meta = {
* 31 - 		__index = function (instance, index)
* 32 - 			local ret = rawget(instance, index) or class[index]
* 33 - 			if ret then return ret end
* 34 - 			local base = class._internal_baseClass
* 35 - 			while base do
* 36 - 				ret = base[index]
* 37 - 				if ret then
* 38 - 					return ret
* 39 - 				end
* 40 - 				base = base._internal_baseClass
* 41 - 			end
* 42 - 			if index == 'super' and class._internal_baseClass then
* 43 - 				return setmetatable({class._internal_baseClass, instance}, propagationMeta)
* 44 - 			end
* 45 - 		end,
* 46 - 		__gc = function (instance)
* 47 - 			if class.destructor then 
* 48 - 				class.destructor(instance) 
* 49 - 				if class._internal_baseClass and class._internal_baseClass.destructor then
* 50 - 					class._internal_baseClass.destructor(instance)
* 51 - 				end
* 52 - 			end 
* 53 - 		end} 
* 54 - 	class.new = function(...)
* 55 - 		local args = {...} 
* 56 - 		local instance = --[[class.baseClass and class.baseClass.new({}) or]] {}
* 57 - 		setmetatable(instance, class._internal_instance_meta) 
* 58 - 		if class.constructor then
* 59 - 			local construction = class.constructor(instance, unpack(args, args[1] == class and 2 or 1))
* 60 - 			if construction ~= nil then
* 61 - 				instance = construction
* 62 - 			end
* 63 - 		end 
* 64 - 		return instance 
* 65 - 	end
* 66 - 	local function getName() return className or '?' end
* 67 - 	class.getClassName = getName class.typeof = className
* 68 - 	setmetatable(class, {__newindex = function (class, index, value)
* 69 - 		if type(index) == 'string' and sub(index, 1, 2) == '__' then
* 70 - 			rawset(class._internal_instance_meta, index, value)
* 71 - 		else 
* 72 - 			rawset(class, index, value)
* 73 - 		end 
* 74 - 	end, __call = class__call})
* 75 - 	if className then 
* 76 - 		_G[className] = class 
* 77 - 	end 
* 78 - 	return class 
* 79 - end

* 80 - function typeof(thing, check)

* 81 - 	local t = type(thing)

* 82 - 	if check then
* 83 - 		if t == 'table' then
* 84 - 			return check == 'table' or thing.getClassName and
* 85 - 			thing.getClassName() == check or thing.baseClass and
* 86 - 			typeof(thing.baseClass, check)
* 87 - 		end
* 88 - 		return t == check
* 89 - 	end
* 90 - 	
* 91 - 	return t == 'table' and thing.getClassName and thing.getClassName() or t
* 92 - end
*
************/

#ifndef SIMPLE_OOP_LUA_H
#define SIMPLE_OOP_LUA_H

const char lua_script_simple_oop[] = {
	0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20, 0x73, 0x75, 0x62, 0x20, 0x3D, 0x20,
	0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2E, 0x73, 0x75, 0x62, 0x20, 0x6C,
	0x6F, 0x63, 0x61, 0x6C, 0x20, 0x75, 0x6E, 0x70, 0x61, 0x63, 0x6B, 0x20,
	0x3D, 0x20, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x2E, 0x75, 0x6E, 0x70, 0x61,
	0x63, 0x6B, 0x20, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20, 0x72, 0x61, 0x77,
	0x67, 0x65, 0x74, 0x20, 0x3D, 0x20, 0x72, 0x61, 0x77, 0x67, 0x65, 0x74,
	0x20, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74,
	0x69, 0x6F, 0x6E, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x5F, 0x5F, 0x63,
	0x61, 0x6C, 0x6C, 0x28, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x2C, 0x20, 0x2E,
	0x2E, 0x2E, 0x29, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x63,
	0x6C, 0x61, 0x73, 0x73, 0x2E, 0x6E, 0x65, 0x77, 0x28, 0x2E, 0x2E, 0x2E,
	0x29, 0x20, 0x65, 0x6E, 0x64, 0x20, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20,
	0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x65, 0x78, 0x74,
	0x65, 0x6E, 0x64, 0x73, 0x28, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64,
	0x2C, 0x20, 0x62, 0x61, 0x73, 0x65, 0x4E, 0x61, 0x6D, 0x65, 0x29, 0x20,
	0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x2E, 0x5F, 0x69, 0x6E, 0x74,
	0x65, 0x72, 0x6E, 0x61, 0x6C, 0x5F, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6C,
	0x61, 0x73, 0x73, 0x20, 0x3D, 0x20, 0x5F, 0x47, 0x5B, 0x62, 0x61, 0x73,
	0x65, 0x4E, 0x61, 0x6D, 0x65, 0x5D, 0x20, 0x65, 0x6E, 0x64, 0x20, 0x6C,
	0x6F, 0x63, 0x61, 0x6C, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x69, 0x6F, 0x6E, 0x4D, 0x65, 0x74, 0x61, 0x20, 0x3D, 0x20, 0x7B,
	0x7D, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6F,
	0x6E, 0x4D, 0x65, 0x74, 0x61, 0x2E, 0x5F, 0x5F, 0x69, 0x6E, 0x64, 0x65,
	0x78, 0x20, 0x3D, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E,
	0x28, 0x70, 0x72, 0x6F, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6F, 0x6E,
	0x54, 0x61, 0x62, 0x6C, 0x65, 0x2C, 0x20, 0x69, 0x6E, 0x64, 0x65, 0x78,
	0x29, 0x20, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x3D, 0x20, 0x70, 0x72, 0x6F, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x61, 0x62, 0x6C, 0x65,
	0x5B, 0x31, 0x5D, 0x20, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20, 0x69, 0x6E,
	0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x20, 0x3D, 0x20, 0x70, 0x72, 0x6F,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x61, 0x62, 0x6C,
	0x65, 0x5B, 0x32, 0x5D, 0x20, 0x69, 0x66, 0x20, 0x69, 0x6E, 0x64, 0x65,
	0x78, 0x20, 0x3D, 0x3D, 0x20, 0x27, 0x73, 0x75, 0x70, 0x65, 0x72, 0x27,
	0x20, 0x74, 0x68, 0x65, 0x6E, 0x20, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20,
	0x72, 0x65, 0x74, 0x20, 0x3D, 0x20, 0x72, 0x61, 0x77, 0x67, 0x65, 0x74,
	0x28, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x2C, 0x20, 0x69,
	0x6E, 0x64, 0x65, 0x78, 0x29, 0x20, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x5B, 0x69, 0x6E, 0x64, 0x65, 0x78,
	0x5D, 0x20, 0x69, 0x66, 0x20, 0x72, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x6E, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x72, 0x65, 0x74,
	0x20, 0x65, 0x6E, 0x64, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x69, 0x6F, 0x6E, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x5B, 0x31, 0x5D,
	0x20, 0x3D, 0x20, 0x74, 0x68, 0x69, 0x73, 0x43, 0x6C, 0x61, 0x73, 0x73,
	0x2E, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x6C, 0x5F, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6E, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x69, 0x6F, 0x6E, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x65, 0x6E, 0x64,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x72, 0x61, 0x77, 0x67,
	0x65, 0x74, 0x28, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x2C,
	0x20, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x29, 0x20, 0x6F, 0x72, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x5B, 0x69, 0x6E, 0x64,
	0x65, 0x78, 0x5D, 0x20, 0x6F, 0x72, 0x20, 0x69, 0x6E, 0x73, 0x74, 0x61,
	0x6E, 0x63, 0x65, 0x5B, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x5D, 0x20, 0x65,
	0x6E, 0x64, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69,
	0x6F, 0x6E, 0x4D, 0x65, 0x74, 0x61, 0x2E, 0x5F, 0x5F, 0x63, 0x61, 0x6C,
	0x6C, 0x20, 0x3D, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E,
	0x28, 0x70, 0x72, 0x6F, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6F, 0x6E,
	0x54, 0x61, 0x62, 0x6C, 0x65, 0x2C, 0x20, 0x2E, 0x2E, 0x2E, 0x29, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x5B,
	0x31, 0x5D, 0x2E, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6F, 0x72, 0x28, 0x70, 0x72, 0x6F, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69,
	0x6F, 0x6E, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x5B, 0x32, 0x5D, 0x2C, 0x20,
	0x2E, 0x2E, 0x2E, 0x29, 0x20, 0x65, 0x6E, 0x64, 0x20, 0x70, 0x72, 0x6F,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x4D, 0x65, 0x74, 0x61,
	0x2E, 0x5F, 0x5F, 0x6E, 0x65, 0x77, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x20,
	0x3D, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x28, 0x70,
	0x72, 0x6F, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x61,
	0x62, 0x6C, 0x65, 0x2C, 0x20, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x2C, 0x20,
	0x76, 0x61, 0x6C, 0x75, 0x65, 0x29, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x5B,
	0x32, 0x5D, 0x5B, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x5D, 0x20, 0x3D, 0x20,
	0x76, 0x61, 0x6C, 0x75, 0x65, 0x20, 0x65, 0x6E, 0x64, 0x20, 0x66, 0x75,
	0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73,
	0x20, 0x28, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x4E, 0x61, 0x6D, 0x65, 0x29,
	0x20, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73,
	0x20, 0x3D, 0x20, 0x7B, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x61,
	0x6C, 0x5F, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20,
	0x3D, 0x20, 0x6E, 0x69, 0x6C, 0x2C, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6E,
	0x64, 0x73, 0x20, 0x3D, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6E, 0x64, 0x73,
	0x7D, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x2E, 0x5F, 0x69, 0x6E, 0x74,
	0x65, 0x72, 0x6E, 0x61, 0x6C, 0x5F, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6E,
	0x63, 0x65, 0x5F, 0x6D, 0x65, 0x74, 0x61, 0x20, 0x3D, 0x20, 0x7B, 0x20,
	0x5F, 0x5F, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x20, 0x3D, 0x20, 0x66, 0x75,
	0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x28, 0x69, 0x6E, 0x73, 0x74,
	0x61, 0x6E, 0x63, 0x65, 0x2C, 0x20, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x29,
	0x20, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20, 0x72, 0x65, 0x74, 0x20, 0x3D,
	0x20, 0x72, 0x61, 0x77, 0x67, 0x65, 0x74, 0x28, 0x69, 0x6E, 0x73, 0x74,
	0x61, 0x6E, 0x63, 0x65, 0x2C, 0x20, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x29,
	0x20, 0x6F, 0x72, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x5B, 0x69, 0x6E,
	0x64, 0x65, 0x78, 0x5D, 0x20, 0x69, 0x66, 0x20, 0x72, 0x65, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x6E, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20,
	0x72, 0x65, 0x74, 0x20, 0x65, 0x6E, 0x64, 0x20, 0x6C, 0x6F, 0x63, 0x61,
	0x6C, 0x20, 0x62, 0x61, 0x73, 0x65, 0x20, 0x3D, 0x20, 0x63, 0x6C, 0x61,
	0x73, 0x73, 0x2E, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x6C,
	0x5F, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x77,
	0x68, 0x69, 0x6C, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x20, 0x64, 0x6F,
	0x20, 0x72, 0x65, 0x74, 0x20, 0x3D, 0x20, 0x62, 0x61, 0x73, 0x65, 0x5B,
	0x69, 0x6E, 0x64, 0x65, 0x78, 0x5D, 0x20, 0x69, 0x66, 0x20, 0x72, 0x65,
	0x74, 0x20, 0x74, 0x68, 0x65, 0x6E, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6E, 0x20, 0x72, 0x65, 0x74, 0x20, 0x65, 0x6E, 0x64, 0x20, 0x62, 0x61,
	0x73, 0x65, 0x20, 0x3D, 0x20, 0x62, 0x61, 0x73, 0x65, 0x2E, 0x5F, 0x69,
	0x6E, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x6C, 0x5F, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x65, 0x6E, 0x64, 0x20, 0x69, 0x66,
	0x20, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x20, 0x3D, 0x3D, 0x20, 0x27, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x27, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x63, 0x6C,
	0x61, 0x73, 0x73, 0x2E, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x61,
	0x6C, 0x5F, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x6E, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20,
	0x73, 0x65, 0x74, 0x6D, 0x65, 0x74, 0x61, 0x74, 0x61, 0x62, 0x6C, 0x65,
	0x28, 0x7B, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x2E, 0x5F, 0x69, 0x6E, 0x74,
	0x65, 0x72, 0x6E, 0x61, 0x6C, 0x5F, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6C,
	0x61, 0x73, 0x73, 0x2C, 0x20, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x63,
	0x65, 0x7D, 0x2C, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x69, 0x6F, 0x6E, 0x4D, 0x65, 0x74, 0x61, 0x29, 0x20, 0x65, 0x6E, 0x64,
	0x20, 0x65, 0x6E, 0x64, 0x2C, 0x20, 0x5F, 0x5F, 0x67, 0x63, 0x20, 0x3D,
	0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x28, 0x69,
	0x6E, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x29, 0x20, 0x69, 0x66, 0x20,
	0x63, 0x6C, 0x61, 0x73, 0x73, 0x2E, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x6E, 0x20, 0x63, 0x6C,
	0x61, 0x73, 0x73, 0x2E, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6F, 0x72, 0x28, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x29,
	0x20, 0x69, 0x66, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x2E, 0x5F, 0x69,
	0x6E, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x6C, 0x5F, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x63, 0x6C,
	0x61, 0x73, 0x73, 0x2E, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x61,
	0x6C, 0x5F, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x2E,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x6E, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x2E, 0x5F, 0x69,
	0x6E, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x6C, 0x5F, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x6C, 0x61, 0x73, 0x73, 0x2E, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6F, 0x72, 0x28, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x63,
	0x65, 0x29, 0x20, 0x65, 0x6E, 0x64, 0x20, 0x65, 0x6E, 0x64, 0x20, 0x65,
	0x6E, 0x64, 0x7D, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x2E, 0x6E, 0x65,
	0x77, 0x20, 0x3D, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E,
	0x28, 0x2E, 0x2E, 0x2E, 0x29, 0x20, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20,
	0x61, 0x72, 0x67, 0x73, 0x20, 0x3D, 0x20, 0x7B, 0x2E, 0x2E, 0x2E, 0x7D,
	0x20, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20, 0x69, 0x6E, 0x73, 0x74, 0x61,
	0x6E, 0x63, 0x65, 0x20, 0x3D, 0x20, 0x2D, 0x2D, 0x5B, 0x5B, 0x63, 0x6C,
	0x61, 0x73, 0x73, 0x2E, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6C, 0x61, 0x73,
	0x73, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x2E,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x2E, 0x6E, 0x65,
	0x77, 0x28, 0x7B, 0x7D, 0x29, 0x20, 0x6F, 0x72, 0x5D, 0x5D, 0x20, 0x7B,
	0x7D, 0x20, 0x73, 0x65, 0x74, 0x6D, 0x65, 0x74, 0x61, 0x74, 0x61, 0x62,
	0x6C, 0x65, 0x28, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x2C,
	0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x2E, 0x5F, 0x69, 0x6E, 0x74, 0x65,
	0x72, 0x6E, 0x61, 0x6C, 0x5F, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x63,
	0x65, 0x5F, 0x6D, 0x65, 0x74, 0x61, 0x29, 0x20, 0x69, 0x66, 0x20, 0x63,
	0x6C, 0x61, 0x73, 0x73, 0x2E, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x6E, 0x20, 0x6C, 0x6F,
	0x63, 0x61, 0x6C, 0x20, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6F, 0x6E, 0x20, 0x3D, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73,
	0x2E, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6F, 0x72,
	0x28, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x2C, 0x20, 0x75,
	0x6E, 0x70, 0x61, 0x63, 0x6B, 0x28, 0x61, 0x72, 0x67, 0x73, 0x2C, 0x20,
	0x61, 0x72, 0x67, 0x73, 0x5B, 0x31, 0x5D, 0x20, 0x3D, 0x3D, 0x20, 0x63,
	0x6C, 0x61, 0x73, 0x73, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x32, 0x20, 0x6F,
	0x72, 0x20, 0x31, 0x29, 0x29, 0x20, 0x69, 0x66, 0x20, 0x63, 0x6F, 0x6E,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x7E, 0x3D,
	0x20, 0x6E, 0x69, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x6E, 0x20, 0x69, 0x6E,
	0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x20, 0x3D, 0x20, 0x63, 0x6F, 0x6E,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x65, 0x6E,
	0x64, 0x20, 0x65, 0x6E, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E,
	0x20, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x20, 0x65, 0x6E,
	0x64, 0x20, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20, 0x66, 0x75, 0x6E, 0x63,
	0x74, 0x69, 0x6F, 0x6E, 0x20, 0x67, 0x65, 0x74, 0x4E, 0x61, 0x6D, 0x65,
	0x28, 0x29, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x63, 0x6C,
	0x61, 0x73, 0x73, 0x4E, 0x61, 0x6D, 0x65, 0x20, 0x6F, 0x72, 0x20, 0x27,
	0x3F, 0x27, 0x20, 0x65, 0x6E, 0x64, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73,
	0x2E, 0x67, 0x65, 0x74, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x4E, 0x61, 0x6D,
	0x65, 0x20, 0x3D, 0x20, 0x67, 0x65, 0x74, 0x4E, 0x61, 0x6D, 0x65, 0x20,
	0x63, 0x6C, 0x61, 0x73, 0x73, 0x2E, 0x74, 0x79, 0x70, 0x65, 0x6F, 0x66,
	0x20, 0x3D, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x4E, 0x61, 0x6D, 0x65,
	0x20, 0x73, 0x65, 0x74, 0x6D, 0x65, 0x74, 0x61, 0x74, 0x61, 0x62, 0x6C,
	0x65, 0x28, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x2C, 0x20, 0x7B, 0x5F, 0x5F,
	0x6E, 0x65, 0x77, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x20, 0x3D, 0x20, 0x66,
	0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x28, 0x63, 0x6C, 0x61,
	0x73, 0x73, 0x2C, 0x20, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x2C, 0x20, 0x76,
	0x61, 0x6C, 0x75, 0x65, 0x29, 0x20, 0x69, 0x66, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x28, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x29, 0x20, 0x3D, 0x3D, 0x20,
	0x27, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x27, 0x20, 0x61, 0x6E, 0x64,
	0x20, 0x73, 0x75, 0x62, 0x28, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x2C, 0x20,
	0x31, 0x2C, 0x20, 0x32, 0x29, 0x20, 0x3D, 0x3D, 0x20, 0x27, 0x5F, 0x5F,
	0x27, 0x20, 0x74, 0x68, 0x65, 0x6E, 0x20, 0x72, 0x61, 0x77, 0x73, 0x65,
	0x74, 0x28, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x2E, 0x5F, 0x69, 0x6E, 0x74,
	0x65, 0x72, 0x6E, 0x61, 0x6C, 0x5F, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6E,
	0x63, 0x65, 0x5F, 0x6D, 0x65, 0x74, 0x61, 0x2C, 0x20, 0x69, 0x6E, 0x64,
	0x65, 0x78, 0x2C, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x29, 0x20, 0x65,
	0x6C, 0x73, 0x65, 0x20, 0x72, 0x61, 0x77, 0x73, 0x65, 0x74, 0x28, 0x63,
	0x6C, 0x61, 0x73, 0x73, 0x2C, 0x20, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x2C,
	0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x29, 0x20, 0x65, 0x6E, 0x64, 0x20,
	0x65, 0x6E, 0x64, 0x2C, 0x20, 0x5F, 0x5F, 0x63, 0x61, 0x6C, 0x6C, 0x20,
	0x3D, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x5F, 0x5F, 0x63, 0x61, 0x6C,
	0x6C, 0x7D, 0x29, 0x20, 0x69, 0x66, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73,
	0x4E, 0x61, 0x6D, 0x65, 0x20, 0x74, 0x68, 0x65, 0x6E, 0x20, 0x5F, 0x47,
	0x5B, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x4E, 0x61, 0x6D, 0x65, 0x5D, 0x20,
	0x3D, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x65, 0x6E, 0x64, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73,
	0x20, 0x65, 0x6E, 0x64, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F,
	0x6E, 0x20, 0x74, 0x79, 0x70, 0x65, 0x6F, 0x66, 0x28, 0x74, 0x68, 0x69,
	0x6E, 0x67, 0x2C, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6B, 0x29, 0x20, 0x6C,
	0x6F, 0x63, 0x61, 0x6C, 0x20, 0x74, 0x20, 0x3D, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x28, 0x74, 0x68, 0x69, 0x6E, 0x67, 0x29, 0x20, 0x69, 0x66, 0x20,
	0x63, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x74, 0x68, 0x65, 0x6E, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x20, 0x3D, 0x3D, 0x20, 0x27, 0x74, 0x61, 0x62, 0x6C,
	0x65, 0x27, 0x20, 0x74, 0x68, 0x65, 0x6E, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6E, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x3D, 0x3D, 0x20,
	0x27, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x27, 0x20, 0x6F, 0x72, 0x20, 0x74,
	0x68, 0x69, 0x6E, 0x67, 0x2E, 0x67, 0x65, 0x74, 0x43, 0x6C, 0x61, 0x73,
	0x73, 0x4E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x68,
	0x69, 0x6E, 0x67, 0x2E, 0x67, 0x65, 0x74, 0x43, 0x6C, 0x61, 0x73, 0x73,
	0x4E, 0x61, 0x6D, 0x65, 0x28, 0x29, 0x20, 0x3D, 0x3D, 0x20, 0x63, 0x68,
	0x65, 0x63, 0x6B, 0x20, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x69, 0x6E, 0x67,
	0x2E, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x61,
	0x6E, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x6F, 0x66, 0x28, 0x74, 0x68,
	0x69, 0x6E, 0x67, 0x2E, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6C, 0x61, 0x73,
	0x73, 0x2C, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6B, 0x29, 0x20, 0x65, 0x6E,
	0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x74, 0x20, 0x3D,
	0x3D, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x65, 0x6E, 0x64, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x74, 0x20, 0x3D, 0x3D, 0x20,
	0x27, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x27, 0x20, 0x61, 0x6E, 0x64, 0x20,
	0x74, 0x68, 0x69, 0x6E, 0x67, 0x2E, 0x67, 0x65, 0x74, 0x43, 0x6C, 0x61,
	0x73, 0x73, 0x4E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74,
	0x68, 0x69, 0x6E, 0x67, 0x2E, 0x67, 0x65, 0x74, 0x43, 0x6C, 0x61, 0x73,
	0x73, 0x4E, 0x61, 0x6D, 0x65, 0x28, 0x29, 0x20, 0x6F, 0x72, 0x20, 0x74,
	0x20, 0x65, 0x6E, 0x64
};

#endif